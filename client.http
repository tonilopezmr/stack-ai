# Make manual end-to-end tests for the API client

### Create Library
curl -X POST "http://localhost:8000/libraries/" -H "Content-Type: application/json" -d '{
  "id": 1,
  "documents": [
    {
      "id": 1,
      "chunks": [
        {
          "id": 1,
          "text": "Chunk 1 text",
          "metadata": {"author": "Author 1", "date": "2024-01-01"},
          "embedding": [0.1, 0.2, 0.3, 0.4, 0.5]
        },
        {
          "id": 2,
          "text": "Chunk 2 text",
          "metadata": {"author": "Author 2", "date": "2024-01-02"},
          "embedding": [0.6, 0.7, 0.8, 0.9, 1.0]
        }
      ],
      "metadata": {"title": "Document 1", "category": "Category A"}
    },
    {
      "id": 2,
      "chunks": [
        {
          "id": 3,
          "text": "Chunk 3 text",
          "metadata": {"author": "Author 3", "date": "2024-01-03"},
          "embedding": [1.1, 1.2, 1.3, 1.4, 1.5]
        }
      ],
      "metadata": {"title": "Document 2", "category": "Category B"}
    }
  ],
  "metadata": {"library_name": "Example Library", "location": "Location X"}
}'

### Create Library with a single document and without metadata
curl -X POST "http://localhost:8000/libraries/" -H "Content-Type: application/json" -d '{
  "documents": [
    {
      "id": 2,
      "chunks": [
        {
          "id": 1,
          "text": "Chunk 1 text",
          "metadata": {"author": "Author 1", "date": "2024-01-01"}
        }
      ]
    }
  ]
}'

### Create Library with without documents
curl -X POST "http://localhost:8000/libraries/" -H "Content-Type: application/json" -d '{
  "documents": []
}'

### Read Library
curl -X GET "http://localhost:8000/libraries/1"

### Read Library that doesn't exist
curl -X GET "http://localhost:8000/libraries/100"

### Update Library
curl -X PUT "http://localhost:8000/libraries/1" -H "Content-Type: application/json" -d '{
  "id": 1,
  "documents": [
    {
      "id": 1,
      "chunks": [
        {
          "text": "Chunk 1 text",
          "metadata": {"author": "Author 1", "date": "2024-01-01"}
        },
        {
          "text": "Chunk 2 text",
          "metadata": {"author": "Author 2", "date": "2024-01-02"}
        }
      ],
      "metadata": {"title": "Document 1", "category": "Category A"}
    }    
  ],
  "metadata": {"library_name": "Updated library", "location": "Location X"}
}'


### Delete Library
curl -X DELETE "http://localhost:8000/libraries/1"

### Create Chunk
curl -X POST "http://localhost:8000/libraries/1/documents/1/chunks" -H "Content-Type: application/json" -d '{
  "id": 3,
  "text": "New chunk text",
  "metadata": {"author": "New Author", "date": "2024-01-04"}
}'

### Read Chunk
curl -X GET "http://localhost:8000/libraries/1/documents/1/chunks/3"

### Update Chunk
curl -X PUT "http://localhost:8000/libraries/1/documents/1/chunks/3" -H "Content-Type: application/json" -d '{
  "id": 3,
  "text": "Updated chunk text",
  "metadata": {"author": "Updated Author", "date": "2024-01-05"}
}'

### Delete Chunk
curl -X DELETE "http://localhost:8000/libraries/1/documents/1/chunks/3"

### Search Vector Similarities with Metadata Filter
curl -X POST "http://localhost:8000/libraries/1/search_vectors" -H "Content-Type: application/json" -d '{
  "vector": [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0],
  "num_results": 2,
  "filter_metadata": {"author": "Author 1"}
}'

### Search Vector Similarities with New Vector
curl -X POST "http://localhost:8000/libraries/1/search_vectors" -H "Content-Type: application/json" -d '{
  "vector": [0.1, 0.2, 0.3, 0.4, 0.5],
  "num_results": 2,
  "filter_metadata": {"author": "Author 1"}
}'

### Search Vector Similarities with Metadata Filter Greater Than Specific Date
curl -X POST "http://localhost:8000/libraries/1/search_vectors" -H "Content-Type: application/json" -d '{
  "vector": [0.13, 0.23, 0.43, 0.43, 0.13],
  "num_results": 2,
  "filter_metadata": {"date": {"$gt": "2024-01-01"}}
}'

